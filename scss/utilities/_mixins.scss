// ==========================================================================
// Mixins
// ==========================================================================

// BEM selectors
//for element inside a block

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}
//Flexbox
@mixin flex($display,$direction,$justify: center){
  display:$display;
  flex-direction:$direction;
  justify-content:$justify;
}

//Media queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
     @content;
    }
  }
  @else if $break == "large" {
    @media(min-width: $brkpoint-lg) {
      @content;
    }
  }
  @else {
    @error "Whoops! No value could be retrieved for `#{$break}`.";
  }
}
// Generate modifier color classes


//theme color key,value map
//include this in any rule that needs a theme background color
@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;
    }
  }
}
//generate background colors for grid--col--#.theme__colors
@mixin grid-colors($map) {
  @each $grid, $color in $map {
    &--#{$grid}.theme__colors {
      background-color: $color;
    }
  }
}

//wrapped the below @each directive in a mixin shown above to make it reusable
// @each $theme, $color in $ui-colors {
//   .btn--#{$theme} {
//     background-color: $color;
//   }
// }

// Generating :before or :after pseudo-element shapes

@mixin pseudo-el(
	$el,
	$el-w: null,
	$el-h: null) {
	@if $el == "before" or $el == "after" {
	  &:#{$el} {
		  @extend %pseudos;
		  width: $el-w;
	  	height: $el-h;
	    @content;
	  }
  }
      @else {
    @error "`#{$el}` is not a valid pseudo-element.";
  }
}



// Image replacement
@mixin img-replace($img, $w, $h, $disp: block) {
  background-image: url('#{path--rel}/#{$img}');
  background-repeat: no-repeat;
  width: $w;
  height: $h;
  display: $disp;
}

// Adjacent sibling margins
@mixin doubly($margin: 1em) {
	& + & {
	  margin-left: $margin;
    @content;
	}
}
//Grid Columns
@mixin g-columns {
  @for $i from 1 through $g-col-count {

    $context: g-context($g-col-width, $g-col-count, $g-gutter-width) !global;
    $target: ($g-col-width * $i) + ($g-gutter-width * ($i - 1));

    // Generate column modifier classes
    &--#{$i} {
      width: percentage($target / $context);
        }
      }
}
